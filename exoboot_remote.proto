syntax = "proto3";

/* General Communication to Exoboot_Wrapper class
build command: python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. exoboot_remote.proto
*/

// General Messages
message null {}

message receipt {
    bool received = 1;
}

// Exoboot Controller Messages
message quit {
    bool mybool = 1;
}
message pause {
    bool mybool = 1;
}
message log {
    bool mybool = 1;
}
message torques {
    float peak_torque_left = 1;
    float peak_torque_right = 2;
}
message req_log {
    string thread = 1;
    string field = 2;
}
message ret_val {
    float val = 1;
}


// Logging Messages
message beaver {}

message testmsg {
    string msg = 1;
}

message subject_info {
    float startstamp = 1;
    string subjectID = 2;
    string trial_type = 3;
    string trial_cond = 4;
    string description = 5;
    bool usebackup = 6;
}

// General Message
message gen_msg {
    message stringsingle {
        string field = 1;
        string value = 2;
    }
    message stringvec {
        string field = 1;
        repeated string value = 2;
    }
    message floatsingle {
        string field = 1;
        float value = 2;
    }
    message floatvec {
        string field = 1;
        repeated float value = 2;
    }
    message boolsingle {
        string field = 1;
        bool value = 2;
    }
    message boolvec {
        string field = 1;
        repeated bool value = 2;
    }
    
    repeated stringsingle stringsingles = 1;
    repeated stringvec stringvecs = 2;

    repeated floatsingle floatsingles = 3;
    repeated floatvec floatvecs = 4;

    repeated boolsingle boolsingles = 5;
    repeated boolvec boolvecs = 6;
}

// GRPC Service
service exoboot_over_network {
    // General Methods
    rpc testconnection (testmsg) returns (receipt) {};
    rpc get_subject_info(null) returns (subject_info);
    rpc chop (beaver) returns (receipt) {}; // LoggingServer kill message

    // Exoboot Controller Commands
    rpc set_quit (quit) returns (receipt) {}
    rpc set_pause (pause) returns (receipt) {}
    rpc set_log (log) returns (receipt) {}
    rpc set_torque (torques) returns (receipt) {}
    rpc getpack (req_log) returns (ret_val) {} // make general version using gen_msg

    // Vickrey Auction Specific
    rpc call (gen_msg) returns (receipt) {};
    rpc question (gen_msg) returns (receipt) {};

    // VAS Specific
    rpc update_vas_info (gen_msg) returns (receipt) {};
    rpc slider_update (gen_msg) returns (receipt) {};
    rpc presentation_result (gen_msg) returns (receipt) {};

    // JND Specific
    rpc comparison_result (gen_msg) returns (receipt) {};

    // Pref Specific
    rpc pref_result (gen_msg) returns (receipt) {};

    // General Message
    rpc gen_msg_test (gen_msg) returns (receipt) {};
}
